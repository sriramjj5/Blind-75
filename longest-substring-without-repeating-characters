class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # sliding window 
        # left and right both initialized to 0
        # as we iterate through string, add chars to set
        # if char already in set -- remove from 'left' of set until duplicate is gone
        # if char not already in set -- add it to set, update current max length += 1

        seenSet = set()

        l = 0
        currMax = 0
        maxToReturn = 0
        for r in range(len(s)):
            while s[r] in seenSet:
                seenSet.remove(s[l])
                l += 1
                currMax -= 1
            currMax += 1
            maxToReturn = max(currMax, maxToReturn)
            seenSet.add(s[r])

        return maxToReturn
            